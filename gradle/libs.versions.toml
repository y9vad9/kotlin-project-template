[versions]
kotlin = "1.9.20"
kotlinx-coroutines = "1.7.3"
kotlinx-serialization = "1.6.0"
ktor = "2.3.5"
jupiter = "5.4.0"
exposed = "0.41.1"
android-gradle-plugin = "7.3.1"
compose-compiler = "1.5.3"
android-compose-version = "1.5.4"
compose-multiplatform = "1.5.10"

[libraries]
# kotlinx libraries
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }

# Ktor libraries
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-server-call-logging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-statusPages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }

ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }

# Testing Libraries
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }

junit-jupiter = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "jupiter" }

# Other Multiplatform Libraries
cache4k = { module = "io.github.reactivecircus.cache4k:cache4k", version.require="0.9.0" }

# Other JVM Libraries
h2-database = { module = "com.h2database:h2", version.require = "2.2.224" }

exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }

logback-classic = { module = "ch.qos.logback:logback-classic", version.require = "1.3.5" }

simple-java-mail = { module = "org.simplejavamail:simple-java-mail", version.require = "8.3.1" }

# JetPack Compose Libraries
jetpack-compose-ui = { module = "androidx.compose.ui:ui", version.ref = "android-gradle-plugin" }
jetpack-compose-foundation = {  module = "androidx.compose.foundation:foundation", version.ref = "android-compose-version" }
jetpack-compose-material3 = { module = "androidx.compose.material3:material3", version.require = "1.1.2" }
jetpack-compose-icons = { module = "androidx.compose.material:material-icons-core", version.ref = "android-compose-version" }
jetpack-compose-extendedIcons = { module = "androidx.compose.material:material-icons-extended", version.ref = "android-compose-version" }
jetpack-compose-activity = { module = "androidx.activity:activity-compose", version.ref = "android-compose-version" }
jetpack-compose-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "android-compose-version" }

# Accompanist Libraries
accompanist-systemUiController = { module = "com.google.accompanist:accompanist-systemuicontroller", version.require = "0.32.0" }

# Plugin classpaths
kotlin-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }

[plugins]
# Build Conventions
conventions-multiplatform = { id = "multiplatform-convention", version.require = "SNAPSHOT" }
conventions-multiplatform-library = { id = "multiplatform-library-convention", version.require = "SNAPSHOT" }
conventions-jvm = { id = "jvm-convention", version.require = "SNAPSHOT" }

# Compiler plugins
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }

# Kotlin
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-js = { id = "org.jetbrains.kotlin.js", version.ref = "kotlin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }

# Android
android-library = { id = "com.android.library", version.ref = "android-gradle-plugin" }
android-application = { id = "com.android.library", version.ref = "android-gradle-plugin" }

# Other
compose = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }
